import 'package:flutter/widgets.dart';

@immutable
class TextStyles {
  final TextStyle displayLarge;
  final TextStyle displayMedium;
  final TextStyle displaySmall;
  final TextStyle headlineLarge;
  final TextStyle headlineMedium;
  final TextStyle headlineSmall;
  final TextStyle titleLarge;
  final TextStyle titleMedium;
  final TextStyle titleSmall;
  final TextStyle labelLarge;
  final TextStyle labelMedium;
  final TextStyle labelSmall;
  final TextStyle bodyLarge;
  final TextStyle bodyMedium;
  final TextStyle bodySmall;

  const TextStyles({
    required this.displayLarge,
    required this.displayMedium,
    required this.displaySmall,
    required this.headlineLarge,
    required this.headlineMedium,
    required this.headlineSmall,
    required this.titleLarge,
    required this.titleMedium,
    required this.titleSmall,
    required this.bodyLarge,
    required this.bodyMedium,
    required this.bodySmall,
    required this.labelLarge,
    required this.labelMedium,
    required this.labelSmall,
  });

  TextStyles apply({
    double decorationThicknessDelta = 0.0,
    double decorationThicknessFactor = 1.0,
    double fontSizeDelta = 0.0,
    double fontSizeFactor = 1.0,
    double heightDelta = 0.0,
    double heightFactor = 1.0,
    double letterSpacingDelta = 0.0,
    double letterSpacingFactor = 1.0,
    int fontWeightDelta = 0,
    Color? backgroundColor,
    Color? color,
    Color? decorationColor,
    FontStyle? fontStyle,
    List<FontFeature>? fontFeatures,
    List<FontVariation>? fontVariations,
    List<Shadow>? shadows,
    List<String>? fontFamilyFallback,
    Locale? locale,
    String? fontFamily,
    String? package,
    TextBaseline? textBaseline,
    TextDecoration? decoration,
    TextDecorationStyle? decorationStyle,
    TextLeadingDistribution? leadingDistribution,
    TextOverflow? overflow,
  }) {
    TextStyle applyStyle(TextStyle style) => style.apply(
          backgroundColor: backgroundColor,
          decorationThicknessDelta: decorationThicknessDelta,
          decorationThicknessFactor: decorationThicknessFactor,
          color: color,
          decorationColor: decorationColor,
          fontSizeDelta: fontSizeDelta,
          fontSizeFactor: fontSizeFactor,
          heightDelta: heightDelta,
          heightFactor: heightFactor,
          letterSpacingDelta: letterSpacingDelta,
          letterSpacingFactor: letterSpacingFactor,
          fontFeatures: fontFeatures,
          fontStyle: fontStyle,
          fontWeightDelta: fontWeightDelta,
          fontVariations: fontVariations,
          shadows: shadows,
          fontFamilyFallback: fontFamilyFallback,
          locale: locale,
          fontFamily: fontFamily,
          package: package,
          textBaseline: textBaseline,
          decoration: decoration,
          decorationStyle: decorationStyle,
          leadingDistribution: leadingDistribution,
          overflow: overflow,
        );

    return TextStyles(
      displayLarge: applyStyle(displayLarge),
      displayMedium: applyStyle(displayMedium),
      displaySmall: applyStyle(displaySmall),
      headlineLarge: applyStyle(headlineLarge),
      headlineMedium: applyStyle(headlineMedium),
      headlineSmall: applyStyle(headlineSmall),
      titleLarge: applyStyle(titleLarge),
      titleMedium: applyStyle(titleMedium),
      titleSmall: applyStyle(titleSmall),
      labelLarge: applyStyle(labelLarge),
      labelMedium: applyStyle(labelMedium),
      labelSmall: applyStyle(labelSmall),
      bodyLarge: applyStyle(bodyLarge),
      bodyMedium: applyStyle(bodyMedium),
      bodySmall: applyStyle(bodySmall),
    );
  }

  TextStyles applyStyles({
    TextStyle Function(TextStyle style)? display,
    TextStyle Function(TextStyle style)? headline,
    TextStyle Function(TextStyle style)? title,
    TextStyle Function(TextStyle style)? label,
    TextStyle Function(TextStyle style)? body,
  }) {
    return TextStyles(
      displayLarge: display?.call(this.displayLarge) ?? this.displayLarge,
      displayMedium: display?.call(this.displayMedium) ?? this.displayMedium,
      displaySmall: display?.call(this.displaySmall) ?? this.displaySmall,
      headlineLarge: headline?.call(this.headlineLarge) ?? this.headlineLarge,
      headlineMedium: headline?.call(this.headlineMedium) ?? this.headlineMedium,
      headlineSmall: headline?.call(this.headlineSmall) ?? this.headlineSmall,
      titleLarge: title?.call(this.titleLarge) ?? this.titleLarge,
      titleMedium: title?.call(this.titleMedium) ?? this.titleMedium,
      titleSmall: title?.call(this.titleSmall) ?? this.titleSmall,
      labelLarge: label?.call(this.labelLarge) ?? this.labelLarge,
      labelMedium: label?.call(this.labelMedium) ?? this.labelMedium,
      labelSmall: label?.call(this.labelSmall) ?? this.labelSmall,
      bodyLarge: body?.call(this.bodyLarge) ?? this.bodyLarge,
      bodyMedium: body?.call(this.bodyMedium) ?? this.bodyMedium,
      bodySmall: body?.call(this.bodySmall) ?? this.bodySmall,
    );
  }

  TextStyles applyDisplay({
    double decorationThicknessDelta = 0.0,
    double decorationThicknessFactor = 1.0,
    double fontSizeDelta = 0.0,
    double fontSizeFactor = 1.0,
    double heightDelta = 0.0,
    double heightFactor = 1.0,
    double letterSpacingDelta = 0.0,
    double letterSpacingFactor = 1.0,
    int fontWeightDelta = 0,
    Color? backgroundColor,
    Color? color,
    Color? decorationColor,
    FontStyle? fontStyle,
    List<FontFeature>? fontFeatures,
    List<FontVariation>? fontVariations,
    List<Shadow>? shadows,
    List<String>? fontFamilyFallback,
    Locale? locale,
    String? fontFamily,
    String? package,
    TextBaseline? textBaseline,
    TextDecoration? decoration,
    TextDecorationStyle? decorationStyle,
    TextLeadingDistribution? leadingDistribution,
    TextOverflow? overflow,
  }) {
    TextStyle applyStyle(TextStyle style) => style.apply(
          backgroundColor: backgroundColor,
          decorationThicknessDelta: decorationThicknessDelta,
          decorationThicknessFactor: decorationThicknessFactor,
          color: color,
          decorationColor: decorationColor,
          fontSizeDelta: fontSizeDelta,
          fontSizeFactor: fontSizeFactor,
          heightDelta: heightDelta,
          heightFactor: heightFactor,
          letterSpacingDelta: letterSpacingDelta,
          letterSpacingFactor: letterSpacingFactor,
          fontFeatures: fontFeatures,
          fontStyle: fontStyle,
          fontWeightDelta: fontWeightDelta,
          fontVariations: fontVariations,
          shadows: shadows,
          fontFamilyFallback: fontFamilyFallback,
          locale: locale,
          fontFamily: fontFamily,
          package: package,
          textBaseline: textBaseline,
          decoration: decoration,
          decorationStyle: decorationStyle,
          leadingDistribution: leadingDistribution,
          overflow: overflow,
        );

    return copyWith(
      displayLarge: applyStyle(displayLarge),
      displayMedium: applyStyle(displayMedium),
      displaySmall: applyStyle(displaySmall),
    );
  }

  TextStyles applyHeadline({
    double decorationThicknessDelta = 0.0,
    double decorationThicknessFactor = 1.0,
    double fontSizeDelta = 0.0,
    double fontSizeFactor = 1.0,
    double heightDelta = 0.0,
    double heightFactor = 1.0,
    double letterSpacingDelta = 0.0,
    double letterSpacingFactor = 1.0,
    int fontWeightDelta = 0,
    Color? backgroundColor,
    Color? color,
    Color? decorationColor,
    FontStyle? fontStyle,
    List<FontFeature>? fontFeatures,
    List<FontVariation>? fontVariations,
    List<Shadow>? shadows,
    List<String>? fontFamilyFallback,
    Locale? locale,
    String? fontFamily,
    String? package,
    TextBaseline? textBaseline,
    TextDecoration? decoration,
    TextDecorationStyle? decorationStyle,
    TextLeadingDistribution? leadingDistribution,
    TextOverflow? overflow,
  }) {
    TextStyle applyStyle(TextStyle style) => style.apply(
          backgroundColor: backgroundColor,
          decorationThicknessDelta: decorationThicknessDelta,
          decorationThicknessFactor: decorationThicknessFactor,
          color: color,
          decorationColor: decorationColor,
          fontSizeDelta: fontSizeDelta,
          fontSizeFactor: fontSizeFactor,
          heightDelta: heightDelta,
          heightFactor: heightFactor,
          letterSpacingDelta: letterSpacingDelta,
          letterSpacingFactor: letterSpacingFactor,
          fontFeatures: fontFeatures,
          fontStyle: fontStyle,
          fontWeightDelta: fontWeightDelta,
          fontVariations: fontVariations,
          shadows: shadows,
          fontFamilyFallback: fontFamilyFallback,
          locale: locale,
          fontFamily: fontFamily,
          package: package,
          textBaseline: textBaseline,
          decoration: decoration,
          decorationStyle: decorationStyle,
          leadingDistribution: leadingDistribution,
          overflow: overflow,
        );

    return copyWith(
      headlineLarge: applyStyle(headlineLarge),
      headlineMedium: applyStyle(headlineMedium),
      headlineSmall: applyStyle(headlineSmall),
    );
  }

  TextStyles applyTitle({
    double decorationThicknessDelta = 0.0,
    double decorationThicknessFactor = 1.0,
    double fontSizeDelta = 0.0,
    double fontSizeFactor = 1.0,
    double heightDelta = 0.0,
    double heightFactor = 1.0,
    double letterSpacingDelta = 0.0,
    double letterSpacingFactor = 1.0,
    int fontWeightDelta = 0,
    Color? backgroundColor,
    Color? color,
    Color? decorationColor,
    FontStyle? fontStyle,
    List<FontFeature>? fontFeatures,
    List<FontVariation>? fontVariations,
    List<Shadow>? shadows,
    List<String>? fontFamilyFallback,
    Locale? locale,
    String? fontFamily,
    String? package,
    TextBaseline? textBaseline,
    TextDecoration? decoration,
    TextDecorationStyle? decorationStyle,
    TextLeadingDistribution? leadingDistribution,
    TextOverflow? overflow,
  }) {
    TextStyle applyStyle(TextStyle style) => style.apply(
          backgroundColor: backgroundColor,
          decorationThicknessDelta: decorationThicknessDelta,
          decorationThicknessFactor: decorationThicknessFactor,
          color: color,
          decorationColor: decorationColor,
          fontSizeDelta: fontSizeDelta,
          fontSizeFactor: fontSizeFactor,
          heightDelta: heightDelta,
          heightFactor: heightFactor,
          letterSpacingDelta: letterSpacingDelta,
          letterSpacingFactor: letterSpacingFactor,
          fontFeatures: fontFeatures,
          fontStyle: fontStyle,
          fontWeightDelta: fontWeightDelta,
          fontVariations: fontVariations,
          shadows: shadows,
          fontFamilyFallback: fontFamilyFallback,
          locale: locale,
          fontFamily: fontFamily,
          package: package,
          textBaseline: textBaseline,
          decoration: decoration,
          decorationStyle: decorationStyle,
          leadingDistribution: leadingDistribution,
          overflow: overflow,
        );

    return copyWith(
      titleLarge: applyStyle(titleLarge),
      titleMedium: applyStyle(titleMedium),
      titleSmall: applyStyle(titleSmall),
    );
  }

  TextStyles applyBody({
    double decorationThicknessDelta = 0.0,
    double decorationThicknessFactor = 1.0,
    double fontSizeDelta = 0.0,
    double fontSizeFactor = 1.0,
    double heightDelta = 0.0,
    double heightFactor = 1.0,
    double letterSpacingDelta = 0.0,
    double letterSpacingFactor = 1.0,
    int fontWeightDelta = 0,
    Color? backgroundColor,
    Color? color,
    Color? decorationColor,
    FontStyle? fontStyle,
    List<FontFeature>? fontFeatures,
    List<FontVariation>? fontVariations,
    List<Shadow>? shadows,
    List<String>? fontFamilyFallback,
    Locale? locale,
    String? fontFamily,
    String? package,
    TextBaseline? textBaseline,
    TextDecoration? decoration,
    TextDecorationStyle? decorationStyle,
    TextLeadingDistribution? leadingDistribution,
    TextOverflow? overflow,
  }) {
    TextStyle applyStyle(TextStyle style) => style.apply(
          backgroundColor: backgroundColor,
          decorationThicknessDelta: decorationThicknessDelta,
          decorationThicknessFactor: decorationThicknessFactor,
          color: color,
          decorationColor: decorationColor,
          fontSizeDelta: fontSizeDelta,
          fontSizeFactor: fontSizeFactor,
          heightDelta: heightDelta,
          heightFactor: heightFactor,
          letterSpacingDelta: letterSpacingDelta,
          letterSpacingFactor: letterSpacingFactor,
          fontFeatures: fontFeatures,
          fontStyle: fontStyle,
          fontWeightDelta: fontWeightDelta,
          fontVariations: fontVariations,
          shadows: shadows,
          fontFamilyFallback: fontFamilyFallback,
          locale: locale,
          fontFamily: fontFamily,
          package: package,
          textBaseline: textBaseline,
          decoration: decoration,
          decorationStyle: decorationStyle,
          leadingDistribution: leadingDistribution,
          overflow: overflow,
        );

    return copyWith(
      bodyLarge: applyStyle(bodyLarge),
      bodyMedium: applyStyle(bodyMedium),
      bodySmall: applyStyle(bodySmall),
    );
  }

  TextStyles applyLabel({
    double decorationThicknessDelta = 0.0,
    double decorationThicknessFactor = 1.0,
    double fontSizeDelta = 0.0,
    double fontSizeFactor = 1.0,
    double heightDelta = 0.0,
    double heightFactor = 1.0,
    double letterSpacingDelta = 0.0,
    double letterSpacingFactor = 1.0,
    int fontWeightDelta = 0,
    Color? backgroundColor,
    Color? color,
    Color? decorationColor,
    FontStyle? fontStyle,
    List<FontFeature>? fontFeatures,
    List<FontVariation>? fontVariations,
    List<Shadow>? shadows,
    List<String>? fontFamilyFallback,
    Locale? locale,
    String? fontFamily,
    String? package,
    TextBaseline? textBaseline,
    TextDecoration? decoration,
    TextDecorationStyle? decorationStyle,
    TextLeadingDistribution? leadingDistribution,
    TextOverflow? overflow,
  }) {
    TextStyle applyStyle(TextStyle style) => style.apply(
          backgroundColor: backgroundColor,
          decorationThicknessDelta: decorationThicknessDelta,
          decorationThicknessFactor: decorationThicknessFactor,
          color: color,
          decorationColor: decorationColor,
          fontSizeDelta: fontSizeDelta,
          fontSizeFactor: fontSizeFactor,
          heightDelta: heightDelta,
          heightFactor: heightFactor,
          letterSpacingDelta: letterSpacingDelta,
          letterSpacingFactor: letterSpacingFactor,
          fontFeatures: fontFeatures,
          fontStyle: fontStyle,
          fontWeightDelta: fontWeightDelta,
          fontVariations: fontVariations,
          shadows: shadows,
          fontFamilyFallback: fontFamilyFallback,
          locale: locale,
          fontFamily: fontFamily,
          package: package,
          textBaseline: textBaseline,
          decoration: decoration,
          decorationStyle: decorationStyle,
          leadingDistribution: leadingDistribution,
          overflow: overflow,
        );

    return copyWith(
      labelLarge: applyStyle(labelLarge),
      labelMedium: applyStyle(labelMedium),
      labelSmall: applyStyle(labelSmall),
    );
  }

  TextStyles copyWith({
    TextStyle? displayLarge,
    TextStyle? displayMedium,
    TextStyle? displaySmall,
    TextStyle? headlineLarge,
    TextStyle? headlineMedium,
    TextStyle? headlineSmall,
    TextStyle? titleLarge,
    TextStyle? titleMedium,
    TextStyle? titleSmall,
    TextStyle? labelLarge,
    TextStyle? labelMedium,
    TextStyle? labelSmall,
    TextStyle? bodyLarge,
    TextStyle? bodyMedium,
    TextStyle? bodySmall,
  }) =>
      TextStyles(
        displayLarge: displayLarge ?? this.displayLarge,
        displayMedium: displayMedium ?? this.displayMedium,
        displaySmall: displaySmall ?? this.displaySmall,
        headlineLarge: headlineLarge ?? this.headlineLarge,
        headlineMedium: headlineMedium ?? this.headlineMedium,
        headlineSmall: headlineSmall ?? this.headlineSmall,
        titleLarge: titleLarge ?? this.titleLarge,
        titleMedium: titleMedium ?? this.titleMedium,
        titleSmall: titleSmall ?? this.titleSmall,
        labelLarge: labelLarge ?? this.labelLarge,
        labelMedium: labelMedium ?? this.labelMedium,
        labelSmall: labelSmall ?? this.labelSmall,
        bodyLarge: bodyLarge ?? this.bodyLarge,
        bodyMedium: bodyMedium ?? this.bodyMedium,
        bodySmall: bodySmall ?? this.bodySmall,
      );

  TextStyles lerp(TextStyles? other, double t) {
    if (other is! TextStyles) return this;
    return TextStyles(
      displayLarge: TextStyle.lerp(displayLarge, other.displayLarge, t)!,
      displayMedium: TextStyle.lerp(displayMedium, other.displayMedium, t)!,
      displaySmall: TextStyle.lerp(displaySmall, other.displaySmall, t)!,
      headlineLarge: TextStyle.lerp(headlineLarge, other.headlineLarge, t)!,
      headlineMedium: TextStyle.lerp(headlineMedium, other.headlineMedium, t)!,
      headlineSmall: TextStyle.lerp(headlineSmall, other.headlineSmall, t)!,
      titleLarge: TextStyle.lerp(titleLarge, other.titleLarge, t)!,
      titleMedium: TextStyle.lerp(titleMedium, other.titleMedium, t)!,
      titleSmall: TextStyle.lerp(titleSmall, other.titleSmall, t)!,
      labelLarge: TextStyle.lerp(labelLarge, other.labelLarge, t)!,
      labelMedium: TextStyle.lerp(labelMedium, other.labelMedium, t)!,
      labelSmall: TextStyle.lerp(labelSmall, other.labelSmall, t)!,
      bodyLarge: TextStyle.lerp(bodyLarge, other.bodyLarge, t)!,
      bodyMedium: TextStyle.lerp(bodyMedium, other.bodyMedium, t)!,
      bodySmall: TextStyle.lerp(bodySmall, other.bodySmall, t)!,
    );
  }
}
